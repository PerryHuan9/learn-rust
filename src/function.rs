/**
 * 函数
 * 函数有参数和返回值，当没有指定返回值时为 () 单元类型
 *
 * 语句和表达式
 * 在rust中语句和表达式有一个比较大的区别，表达式是有返回值，而语句没有返回值;
 * 赋值let a = 12;是一个语句，没有返回值， 12+23 或者 12 都是一个表达式，有返回值；
 * 可以在函数末尾写一个表达式充当返回值，需要注意的是，表达式末尾加上分号就变成语句，所以充当返回值时不能加分号。
 *
 * 所以在rust，行末有分号和没有分号是有很大区别的，需要区分对应情况。
 *
 *
 */

pub fn test_fn() {
    let res1 = add(12, 45);
    let res2 = add(22, 66);
    let res3 = divider(999, 666);
    let val = {
        let bcd = 888;
        // 以下没有分号，是一个表达式，可以充当返回值
        bcd + 111
    };
    println!("res1={};\nres2={};\nres3={}\nval={}", res1, res2, res3, val);

    
}

fn add(a1: u8, a2: u8) -> u8 {
    return a1 + a2;
}

fn divider(a1: i32, a2: i32) -> i32 {
    // 以下没有分号是一个表达式，有返回值，如果加上分号就会变成语句，没有返回值，会报错
    a1 - a2
}

fn val() -> i32 {
    let a = 888;
    return a;
}
